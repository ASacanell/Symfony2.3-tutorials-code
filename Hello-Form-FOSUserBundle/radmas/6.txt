6.- Aplicando las buenas prácticas de programación de Symfony2, construir las directivas de seguridad para crear un área pública y otra privada.

	Dado que solo se me piden las directivas de seguridad el código sería el que pondré a continuación, pero para que estas funcionen habría que tener en cuenta, por ejemplo, que hay que crear un controlador con el formulario de solicitud de acceso, y a su vez crear la ruta para que /login utilice dicho controlador.
		
		# app/config/routing.yml
		//...
		login:
			pattern:   /login
			defaults:  { _controller: AcmeSecurityBundle:Security:login }
		login_check:
			pattern:   /login_check
		logout:
			path:   /logout
		
		
	El archivo de seguridad quedará así:
		
		# app/config/security.yml
		security:
			firewalls:
				secured_area:
					pattern:    ^/
					anonymous:  ~
					form_login: ~
					logout: ~


			access_control:
				- { path: ^/admin, roles: ROLE_ADMIN }

			providers:
				in_memory:
					memory:
						users:
							ryan:  { password: ryanpass, roles: 'ROLE_USER' }
							admin: { password: kitten, roles: 'ROLE_ADMIN' }

			encoders:
				Symfony\Component\Security\Core\User\User: plaintext
				
	Con estas directivas estamos haciendo varias cosas:
		Con form_login hemos metido login_path y check_path en la configuración del firewall.
		Con logout permitimos deslogearse de la aplicación entrando en la URL /logout
		Protegemos cualquier URL que sea /admin/* con solo acceso a ROLE_ADMIN.
		Estamos incluyendo directamente dos usuarios y los roles que tienen, para propósitos de prueba en este caso.
		
	A pesar de ello, las directivas podrían ser más avanzadas. 
		Se puede gestionar la autorización con un control más específico, pudiendo ser por ip(- { path: ^/admin, roles: ROLE_USER_IP, ip: 127.0.0.1 }), por host(- { path: ^/admin, roles: ROLE_USER_HOST, host: symfony.com }) o por method(- { path: ^/admin, roles: ROLE_USER_METHOD, methods: [POST, PUT] }).
		También, como vemos en los ejemplos anteriores, podemos tener una jerarquía de roles más extensa.
		
			role_hierarchy:
				ROLE_ADMIN:       ROLE_USER
				ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
				
		Además, los usuarios podrían estar almacenados en una base de datos.

	

	
	