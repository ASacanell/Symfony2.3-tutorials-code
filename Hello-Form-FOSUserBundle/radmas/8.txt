8.- Aplicando las buenas prácticas de programación de Symfony2, implementar un Repositorio Personalizado, realizando una consulta a base de datos personalizada (en lenguaje DQL).

	Para esta pregunta voy a utilizar una entidad Product, en la que tengo que añadir a la entidad la siguiente línea:
	@ORM\Entity(repositoryClass="Acme\StoreBundle\Entity\ProductRepository")
	
	El código final quedará así:
	
		// src/Acme/StoreBundle/Entity/Product.php
		<?php
		namespace Acme\StoreBundle\Entity;
		 
		use Doctrine\ORM\Mapping as ORM;
		 
		/**
		 * @ORM\Entity
		 * @ORM\Table(name="product")
		 * @ORM\Entity(repositoryClass="Acme\StoreBundle\Entity\ProductRepository")
		 */
		class Product
		{
			/**
			 * @ORM\Id
			 * @ORM\Column(type="integer")
			 * @ORM\GeneratedValue(strategy="AUTO")
			 */
			protected $id;
		 
			/**
			 * @ORM\Column(type="string", length=100)
			 */
			protected $name;
		 
			/**
			 * @ORM\Column(type="decimal", scale=2)
			 */
			protected $price;
		 
			/**
			 * @ORM\Column(type="text")
			 */
			protected $description;

			/**
			 * Get id
			 *
			 * @return integer 
			 */
			public function getId()
			{
				return $this->id;
			}

			/**
			 * Set name
			 *
			 * @param string $name
			 * @return Product
			 */
			public function setName($name)
			{
				$this->name = $name;

				return $this;
			}

			/**
			 * Get name
			 *
			 * @return string 
			 */
			public function getName()
			{
				return $this->name;
			}

			/**
			 * Set price
			 *
			 * @param string $price
			 * @return Product
			 */
			public function setPrice($price)
			{
				$this->price = $price;

				return $this;
			}

			/**
			 * Get price
			 *
			 * @return string 
			 */
			public function getPrice()
			{
				return $this->price;
			}

			/**
			 * Set description
			 *
			 * @param string $description
			 * @return Product
			 */
			public function setDescription($description)
			{
				$this->description = $description;

				return $this;
			}

			/**
			 * Get description
			 *
			 * @return string 
			 */
			public function getDescription()
			{
				return $this->description;
			}
		}
	
	Después, podemos usar el comando: php app/console doctrine:generate:entities Acme ; que nos creará automaticamente la nueva clase repositorio. Aquí añadiremos las consultas DQL que necesitemos:
	
		<?php

		namespace Acme\StoreBundle\Entity;

		use Doctrine\ORM\EntityRepository;

		/**
		 * ProductRepository
		 *
		 * This class was generated by the Doctrine ORM. Add your own custom
		 * repository methods below.
		 */
		class ProductRepository extends EntityRepository
		{
			public function findAllOrderedByName()
				{
					$em = $this->getEntityManager();
					$query = $em->createQuery('
						SELECT p 
						FROM AcmeStoreBundle:Product p 
						ORDER BY p.name ASC'
					);
				
					$products = $query->getResult();
					
					return $products;
				}
		}

	Finalmente, el controlador podría utilizar esta consulta:
	
		<?php

		namespace Acme\StoreBundle\Controller;
		use Acme\StoreBundle\Entity\Product;
		use Symfony\Component\HttpFoundation\Response;

		use Symfony\Bundle\FrameworkBundle\Controller\Controller;

		class DefaultController extends Controller
		{	
			public function createAction()
			{
				$em = $this->getDoctrine()->getManager();
				$products = $em->getRepository('AcmeStoreBundle:Product')
					   ->findAllOrderedByName();
				
				if (!$products) {
					throw $this->createNotFoundException(
						'No products found'
					);
				}
			 
				//Return view...
			}
		}
